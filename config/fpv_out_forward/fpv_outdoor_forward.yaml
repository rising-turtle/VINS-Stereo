%YAML:1.0

#common parameters
imu_topic: "/snappy_imu"
image0_topic: "/snappy_cam/stereo_l"
image1_topic: "/snappy_cam/stereo_r"

output_path: "/home/davidz/work/result/fpv_outdoor_forward"

#camera calibration
cam0_calib: "cam0_fisheye.yaml"
cam1_calib: "cam1_fisheye.yaml"
image_width: 640
image_height: 480

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0  # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.031798,  0.012828,  0.999412, 
          -0.999493,  0.000952, -0.031813, 
          -0.001359, -0.999917,  0.012791] 

extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.010168, 0.020803, -0.000749]

Rrl: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9997470623689986, 0.009836089265916417, 0.020225296846065624,
          -0.00975774768296796, 0.9999445171722606, -0.0039684930755682956,
          -0.020263209141547188, 0.0037701359508940783, 0.9997875716521978]

Trl: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.07919358086270675, 0.000831414953842084, 0.00044568632114983057]

body_T_cam1: !!opencv-matrix # Timu2c_2, Tc1_2_c2 is a virtual transformation [I,t] t = [0.1, 0, 0], note "mbf" in estimator_dpt.cpp
   rows: 4
   cols: 4
   dt: d
   data: [-0.011450,  0.009171,  0.999892,  0.008808,
          -0.999875,  0.010831, -0.011549, -0.058384,
          -0.010935, -0.999899,  0.009046, -0.000788,
          0.000000,  0.000000, -0.000000,  1.000000]

#feature traker paprameters
max_cnt: 300 #250            # max feature number in feature tracking
min_dist: 25            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
flow_back: 1 #1         # if need double check by reverse optical flow 

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.12 # 0.12 #0.1 # 0.04          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.02 #0.05 # 0.02 # 0.05 #0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.002 #0.0004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.00004 #2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.80766     # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: -0.007983859928063504                # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet).

#loop closure parameters
# loop_closure: 0 #1                    # start loop closure
# load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
# fast_relocalization: 1             # useful in real-time and large project
# pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path

#visualization parameters
# save_image: 1 #1                   # save image in pose graph for visualization prupose; you can close this function by setting 0
# visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
# visualize_camera_size: 0.4      # size of camera marker in RVIZ
