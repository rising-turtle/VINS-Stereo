%YAML:1.0

#common parameters
imu_topic: "/imu0"
image0_topic: "/cam0/image_raw"
image1_topic: "/cam1/image_raw"

output_path: "/home/davidz/work/result/euroc"

#camera calibration
cam0_calib: "cam0_fisheye.yaml"
cam1_calib: "cam1_fisheye.yaml"
# image_width: 640
# image_height: 480

### for debug 
#camera calibration
image_topic: "/cam0/image_raw"

model_type: MEI
camera_name: camera
image_width: 752
image_height: 480
mirror_parameters:
   xi: 3.6313355285286337e+00
distortion_parameters:
   k1: 1.1757726639872075e+00
   k2: 1.5491281051140213e+01
   p1: -8.1237172954550494e-04
   p2: 6.7297684030310243e-04
projection_parameters:
   gamma1: 2.1387619122017772e+03
   gamma2: 2.1315886210259278e+03
   u0: 3.6119856633263799e+02
   v0: 2.4827644773395667e+02

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.0148655429818, -0.999880929698, 0.00414029679422,
           0.999557249008, 0.0149672133247, 0.025715529948,
          -0.0257744366974, 0.00375618835797, 0.999660727178]

extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ -0.0216401454975, -0.064676986768, 0.00981073058949]

Rrl: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.999997,  -0.00231714, -0.000343393,     
           0.00231207,     0.999898,   -0.0140907, 
           0.000376008,    0.0140898,     0.999901 ]

Trl: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.110074, -0.000156612, 0.000889383]

body_T_cam1: !!opencv-matrix # Timu2c_2, Tc1_2_c2 is a virtual transformation [I,t] t = [0.1, 0, 0], note "mbf" in estimator_dpt.cpp
   rows: 4
   cols: 4
   dt: d
   data: [0.0125552670891, -0.999755099723, 0.0182237714554, -0.0198435579556,
           0.999598781151, 0.0130119051815, 0.0251588363115, 0.0453689425024,
          -0.0253898008918, 0.0179005838253, 0.999517347078, 0.00786212447038,
          0.,       0. ,          0. ,          1.]

#feature traker paprameters
max_cnt: 150 # 300 #250            # max feature number in feature tracking
min_dist: 25            # min distance between two features
freq: 10 #10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
flow_back: 1            # if need double check by reverse optical flow 

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
# seems 0.12 & 0.02 is a better choice compared to 0.1 & 0.05
acc_n: 0.1 # 0.1 # 0.12 # 0.12 # 0.1 # 0.04          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.01 # 0.05 # 0.02 # 0.01 0.05 #0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.001 #0.0004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.0001 #2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.80766     # gravity magnitude

#unsynchronization parameters
estimate_td: 0  #1                      # online estimate time offset between camera and imu
td: 0 #-0.0166845720919                # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet).

#loop closure parameters
# loop_closure: 0 #1                    # start loop closure
# load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
# fast_relocalization: 1             # useful in real-time and large project
# pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path

#visualization parameters
# save_image: 1 #1                   # save image in pose graph for visualization prupose; you can close this function by setting 0
# visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
# visualize_camera_size: 0.4      # size of camera marker in RVIZ
